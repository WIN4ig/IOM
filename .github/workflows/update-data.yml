name: Update matrix from Rosminzdrav (daily)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *"   # ежедневно 03:00 UTC (~06:00 по Бухаресту)

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas openpyxl

      - name: Fetch & convert XLSX -> JSON
        run: |
          python - << 'PY'
          import pandas as pd, json, re, sys, os, urllib.request, datetime
          URL = "https://static.edu.rosminzdrav.ru/portal/common/instructions/Matrix_IOM-CR-dolgnost-.xlsx"
          os.makedirs("data", exist_ok=True)
          tmp = "data/_matrix.xlsx"
          try:
              urllib.request.urlretrieve(URL, tmp)
          except Exception as e:
              print("Download failed:", e, file=sys.stderr)
              sys.exit(1)

          # Читаем все листы, выводим инфо
          xls = pd.ExcelFile(tmp)
          print("Sheets found:", xls.sheet_names)

          frames = []
          for name in xls.sheet_names:
              try:
                  df = xls.parse(name, header=0)  # заголовки берём из первой строки
                  print(f"\n--- Sheet: {name} ---")
                  print("Columns:", df.columns.tolist())
                  print(df.head(5))  # первые 5 строк для понимания структуры
                  if not df.empty:
                      frames.append(df)
              except Exception as e:
                  print(f"Error reading sheet {name}:", e)

          if not frames:
              print("No data in workbook", file=sys.stderr)
              sys.exit(1)
          df = pd.concat(frames, ignore_index=True)

          # Нормализуем заголовки
          def norm(s):
              return re.sub(r'\s+', ' ', str(s)).strip().lower()

          cols = {norm(c): c for c in df.columns}
          # Ищем кандидатов колонок
          def find_col(patterns):
              for key, orig in cols.items():
                  if any(re.search(p, key) for p in patterns):
                      return orig
              return None

          # Специальность (варианты названий)
          col_spec = find_col([r'врачеб.*спец', r'\bспец', r'специальност'])
          # ИОМ-КР
          col_iom = find_col([r'\bиом', r'иом-?\s*кр', r'индивидуал.*образ.*маршрут', r'образов.*маршрут'])
          # Должность
          col_pos = find_col([r'должност', r'должность', r'позици'])

          # Если чего-то нет, добавим пустые столбцы
          for need, name in [('specialty', col_spec), ('iom', col_iom), ('position', col_pos)]:
              if name is None:
                  df[need] = None

          # Формируем выход
          items = []
          def val(x):
              if pd.isna(x): return None
              s = str(x).strip()
              return s if s else None

          for _, row in df.iterrows():
              specialty = val(row[col_spec]) if col_spec in df.columns else val(row.get('specialty'))
              iom = val(row[col_iom]) if col_iom in df.columns else val(row.get('iom'))
              position = val(row[col_pos]) if col_pos in df.columns else val(row.get('position'))
              if not (specialty or iom or position):
                  continue
              items.append({
                  "specialty": specialty,
                  "iom": iom,
                  "position": position
              })

          # Список уникальных специальностей
          specs = sorted(set([i["specialty"] for i in items if i["specialty"]]), key=lambda s: s.lower())

          out = {
              "source_url": URL,
              "updated_at": datetime.datetime.utcnow().isoformat() + "Z",
              "items": items,
              "specialties": specs
          }

          with open("data/matrix.json", "w", encoding="utf-8") as f:
              json.dump(out, f, ensure_ascii=False, indent=2)

          # Удаляем временный файл
          try:
              os.remove(tmp)
          except Exception:
              pass
          PY

      - name: Commit changes (if any)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/matrix.json
          if git diff --cached --quiet; then
            echo "No changes."
          else
            git commit -m "chore: daily update matrix.json"
            git push
          fi
